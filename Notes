//  npm doesnt have any full form but it manages packages

// comamnds to push future changes 
git add .
git commit -m "Your commit message"
git push

// bundlers are the dependencies or package that should be installed which will be used to bundle or pack our project and which will be used for development
 
/* there will be two types of dependencies 
 one is dev dependencies and the other is normal dependencies
 dev dependencies will be used in  development phase
 but normal dependencies can also be used in production phase
 ! to install dev dependencies we use # npm install -d "dependecy-name" */



/*  "devDependencies": {
     "parcel": "^2.12.0"
   }

   here ^ symbol is caret ( which will be helpful to update minor versions of the dependencies) and also we can use this ~  is called as tilde ( which will update major versions also ! which may not be safer)*/


/*difference between package.json and pacakage-lock.json 
The package.json file is the central configuration file for a Node.js project. It includes metadata about the project, such as its name, version, description, main file, scripts, author, license, and, most importantly, the dependencies required to run the project.

The package-lock.json file is automatically generated by npm when the npm install command is run. It records the exact versions of every installed package, along with the dependency tree, ensuring consistent installations across different environments and development setups.


Basic difference is that pacakage.json will store the dependencies installed where as package-lock.json stores the exact details of the dependencies*/


/* when we install one dependency we can see that node modules will be created which stores the all the packages that are requires 
for example if we gonna install parcel dependency then parcel will be depending on other dependdenices and other will depend on some other this type of dependency is called as transitive dependency 
because of these many dependencies we can see many folders will be created in node modules folder*/


/*npm will install package , npx will execute package*/


/* here when we import react as cdl links then it will be not a good way 
beacuse there may be updates which will not be updated , and also it should unpackage which will take time so we install react in node_modules and we will use from it */


/*
jsx is not a html its just a html like syntax*/

/*when we write code in jsxx then babel will transpiles the code into react that machine can understand */

/*when we write jsx element in single line, there is no need of brackets , but if we are writing in multi line then we need brackets
we should use camelCase in jsx */
